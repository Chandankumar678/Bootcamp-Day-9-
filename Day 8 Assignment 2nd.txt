#include <stdio.h>
#include <stdlib.h>

#define MAX 100  // Maximum number of vertices

int adjMatrix[MAX][MAX];  // Adjacency matrix
int visited[MAX];         // Array to keep track of visited nodes
int queue[MAX], front = -1, rear = -1;  // Queue for BFS
int numVertices;

// Function to initialize the adjacency matrix
void initAdjMatrix(int n) {
    numVertices = n;
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            adjMatrix[i][j] = 0;
        }
        visited[i] = 0;
    }
}

// Function to add an edge to the graph
void addEdge(int start, int end) {
    adjMatrix[start][end] = 1;
    adjMatrix[end][start] = 1;  // For an undirected graph
}

// Function to enqueue an element into the queue
void enqueue(int vertex) {
    if (rear == MAX - 1) {
        printf("Queue is full!\n");
    } else {
        if (front == -1) front = 0;
        queue[++rear] = vertex;
    }
}

// Function to dequeue an element from the queue
int dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue is empty!\n");
        return -1;
    } else {
        return queue[front++];
    }
}

// Function to perform BFS traversal
void BFS(int startVertex) {
    printf("BFS Traversal: ");
    visited[startVertex] = 1;
    enqueue(startVertex);

    while (front <= rear) {
        int currentVertex = dequeue();
        printf("%d ", currentVertex);

        // Visit all the adjacent vertices of the current vertex
        for (int i = 0; i < numVertices; i++) {
            if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(i);
            }
        }
    }
    printf("\n");
}

// Main function to demonstrate BFS
int main() {
    int n, choice, startVertex, endVertex;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    initAdjMatrix(n);

    while (1) {
        printf("\n1. Add Edge\n2. Display Adjacency Matrix\n3. BFS\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter start and end vertex for the edge (0 to %d): ", n - 1);
                scanf("%d %d", &startVertex, &endVertex);
                if (startVertex >= 0 && endVertex >= 0 && startVertex < n && endVertex < n) {
                    addEdge(startVertex, endVertex);
                } else {
                    printf("Invalid vertices!\n");
                }
                break;

            case 2:
                printf("\nAdjacency Matrix:\n");
                for (int i = 0; i < numVertices; i++) {
                    for (int j = 0; j < numVertices; j++) {
                        printf("%d ", adjMatrix[i][j]);
                    }
                    printf("\n");
                }
                break;

            case 3:
                printf("Enter starting vertex for BFS (0 to %d): ", n - 1);
                scanf("%d", &startVertex);
                if (startVertex >= 0 && startVertex < n) {
                    for (int i = 0; i < n; i++) visited[i] = 0;  // Reset visited array
                    BFS(startVertex);
                } else {
                    printf("Invalid starting vertex!\n");
                }
                break;

            case 4:
                exit(0);

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
